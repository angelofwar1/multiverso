package com.crafterscr.Multiverso.world;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Holder;
import net.minecraft.server.level.WorldGenRegion;
import net.minecraft.world.level.LevelHeightAccessor;
import net.minecraft.world.level.NoiseColumn;
import net.minecraft.world.level.StructureManager;
import net.minecraft.world.level.biome.BiomeManager;
import net.minecraft.world.level.biome.BiomeSource;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.chunk.ChunkAccess;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraft.world.level.levelgen.*;
import net.minecraft.world.level.levelgen.blending.Blender;
import net.minecraft.world.level.levelgen.structure.Structure;
import  net.minecraft.world.level.levelgen.structure.Structure.StructureSettings;
import net.minecraft.world.level.levelgen.structure.StructureSet;

import java.util.List;
import java.util.Map;
import java.util.concurrent.Executor;

public class VoidChunkGenerator extends ChunkGenerator {

    // Codec para serialización (se usa en datapacks y demás)
    public static final Codec<VoidChunkGenerator> CODEC = RecordCodecBuilder.create(instance ->
            instance.group(
                    BiomeSource.CODEC.fieldOf("biome_source").forGetter(g -> g.biomeSource),
                    Structure.StructureSettings.CODEC.fieldOf("structure_settings").forGetter(g -> g.structureSettings)
            ).apply(instance, VoidChunkGenerator::new)
    );

    private final BiomeSource biomeSource;
    private final Structure.StructureSettings structureSettings;
    private final Holder<StructureSettings> settings;

    // Constructor
    public VoidChunkGenerator(BiomeSource biomeSource, StructureSettings structureSettings, Holder<StructureSettings> settings) {
        super(biomeSource);
        this.biomeSource = biomeSource;
        this.structureSettings = structureSettings;
        this.settings = settings;
    }

    // Constructor para crear configuración vacía de estructuras (por si usas constructor vacío)
    public VoidChunkGenerator(BiomeSource biomeSource, StructureSettings structureSettings) {
        this(biomeSource, structureSettings, emptyStructureSettings());
    }

    private static Holder<StructureSettings> emptyStructureSettings() {
        StructureSettings settings = new StructureSettings(
                Map.of(), // estructuras normales
                Map.of(), // estructuras legacy
                NoiseSettings.DEFAULT, // usa el default o define uno vacío si no existe
                false // no usar fuente de aleatoriedad legacy
        );
        return Holder.direct(settings);
    }

    @Override
    protected Codec<? extends ChunkGenerator> codec() {
        return CODEC;
    }

    // Aquí evitas generar terreno, superficie, carvers, mobs, etc.

    @Override
    public void buildSurface(WorldGenRegion region, StructureManager structures, RandomState random, ChunkAccess chunk) {
        // Vacío, no hace nada para superficie
    }

    @Override
    public void applyCarvers(WorldGenRegion region, long seed, RandomState random, BiomeManager biomeManager, StructureManager structureManager, ChunkAccess chunk, GenerationStep.Carving carving) {
        // No aplica carvers
    }

    @Override
    public void buildNoise(WorldGenRegion region, StructureManager structureManager, RandomState randomState, ChunkAccess chunk) {
        // Sin ruido, todo vacío
    }

    @Override
    public void spawnOriginalMobs(WorldGenRegion region) {
        // No spawnea mobs
    }

    @Override
    public int getBaseHeight(int x, int z, LevelHeightAccessor heightAccessor, RandomState randomState) {
        return heightAccessor.getMinBuildHeight(); // Todo al mínimo (vacío)
    }

    @Override
    public NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor heightAccessor, RandomState randomState) {
        return new NoiseColumn(heightAccessor.getMinBuildHeight(), new BlockState[0]); // Sin bloques
    }

    @Override
    public void addDebugScreenInfo(List<String> p_223175_, RandomState p_223176_, BlockPos p_223177_) {

    }

    // Implementa getGenDepth() porque es abstracto en ChunkGenerator
    @Override
    public int getGenDepth() {
        // La profundidad total generada (altura del mundo)
        return 384; // Por ejemplo, 384 bloques, igual que el overworld
    }

    @Override
    public void fillFromNoise(Executor executor, Blender blender, RandomState randomState,
                              StructureManager structureManager, ChunkAccess chunk) {
        // No generamos nada en este generador vacío
    }

    @Override
    public int getSeaLevel() {
        return 0;
    }

    @Override
    public int getMinY() {
        return 0;
    }

    @Override
    public int getBaseHeight(int p_223032_, int p_223033_, Heightmap.Types p_223034_, LevelHeightAccessor p_223035_, RandomState p_223036_) {
        return 0;
    }
}
