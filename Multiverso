package com.crafterscr.Multiverso;

import com.crafterscr.Multiverso.WorldManager;
import com.crafterscr.Multiverso.commands.*;
import com.crafterscr.Multiverso.config.MultiversoConfigManager;
import com.crafterscr.Multiverso.world.WorldCreator;

import net.minecraft.core.registries.Registries;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.storage.LevelResource;

import net.minecraftforge.event.RegisterCommandsEvent;
import net.minecraftforge.event.level.LevelEvent;
import net.minecraftforge.event.server.ServerStartingEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.nio.file.Files;
import java.nio.file.Path;

@Mod("multiverso")
@Mod.EventBusSubscriber
public class Multiverso {

    public Multiverso() {
        // Constructor vacío o para configuraciones iniciales
    }

    @SubscribeEvent
    public static void onCommandRegister(RegisterCommandsEvent event) {
        MVCreateCommand.register(event.getDispatcher());
        MvDeleteCommand.register(event.getDispatcher());
        MvTeleportCommand.register(event.getDispatcher());
        MvTpCommand.register(event.getDispatcher());
        MvListCommand.register(event.getDispatcher());
        MvRemoveCommand.register(event.getDispatcher());
        MvLoadCommand.register(event.getDispatcher());
        MVHelpCommand.register(event.getDispatcher());
        MVReloadConfigCommand.register(event.getDispatcher());
        MVSetCommand.register(event.getDispatcher());
    }

    @SubscribeEvent
    public static void onServerStarting(ServerStartingEvent event) {
        MinecraftServer server = event.getServer();
        Path worldsDir = server.getWorldPath(LevelResource.ROOT).getParent();

        // Cargar configuración global de mundos
        MultiversoConfigManager.loadConfig();

        if (worldsDir != null && Files.isDirectory(worldsDir)) {
            try {
                Files.list(worldsDir)
                        .filter(Files::isDirectory)
                        .forEach(worldPath -> {
                            String worldName = worldPath.getFileName().toString();
                            ResourceKey<Level> levelKey = ResourceKey.create(
                                    Registries.DIMENSION,
                                    new ResourceLocation("multiverso", worldName)
                            );
                            ServerLevel level = server.getLevel(levelKey);

                            if (level == null) {
                                // Mundo no cargado, lo cargamos y registramos
                                try {
                                    ServerLevel loadedWorld = WorldCreator.loadExistingWorld(server, worldName);
                                    if (loadedWorld != null) {
                                        WorldManager.getInstance().addWorld(worldName, loadedWorld);
                                        System.out.println("Mundo cargado y registrado: " + worldName);
                                    } else {
                                        System.out.println("No se pudo cargar el mundo: " + worldName);
                                    }
                                } catch (Exception ex) {
                                    System.err.println("Error cargando mundo " + worldName + ": " + ex.getMessage());
                                    ex.printStackTrace();
                                }
                            } else {
                                // Mundo ya cargado, solo registrarlo
                                WorldManager.getInstance().addWorld(worldName, level);
                                System.out.println("Mundo ya cargado y registrado: " + worldName);
                            }
                        });
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @SubscribeEvent
    public static void onWorldLoad(LevelEvent.Load event) {
        if (!(event.getLevel() instanceof ServerLevel level)) return;
        MultiversoConfigManager.WorldSettingsApplier.applySettingsToWorld(level);
    }
}
