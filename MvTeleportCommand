package com.crafterscr.Multiverso.commands;

import com.crafterscr.Multiverso.WorldManager;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.StringArgumentType;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.commands.Commands;
import net.minecraft.commands.SharedSuggestionProvider;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.Level;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class MvTeleportCommand {

    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
        dispatcher.register(Commands.literal("mvteleport")
                .requires(source -> source.hasPermission(2)) // Solo OP o consola

                // Opción: /mvteleport <jugador> <mundo>
                .then(Commands.argument("jugador", StringArgumentType.word())
                        .suggests((ctx, builder) -> {
                            List<String> players = ctx.getSource().getServer()
                                    .getPlayerList().getPlayers().stream()
                                    .map(p -> p.getGameProfile().getName())
                                    .collect(Collectors.toList());
                            return SharedSuggestionProvider.suggest(players, builder);
                        })
                        .then(Commands.argument("mundo", StringArgumentType.word())
                                .suggests((ctx, builder) -> {
                                    List<String> worlds = new ArrayList<>(WorldManager.getInstance()
                                            .getAvailableWorldNames());
                                    return SharedSuggestionProvider.suggest(worlds, builder);
                                })
                                .executes(ctx -> {
                                    String playerName = StringArgumentType.getString(ctx, "jugador");
                                    String worldName = StringArgumentType.getString(ctx, "mundo");
                                    return teleportPlayer(ctx.getSource(), playerName, worldName);
                                })))

                // Opción: /mvteleport <mundo> (ejecutado por jugador)
                .then(Commands.argument("mundo", StringArgumentType.word())
                        .suggests((ctx, builder) -> {
                            List<String> worlds = new ArrayList<>(WorldManager.getInstance()
                                    .getAvailableWorldNames());
                            return SharedSuggestionProvider.suggest(worlds, builder);
                        })
                        .executes(ctx -> {
                            CommandSourceStack source = ctx.getSource();
                            String worldName = StringArgumentType.getString(ctx, "mundo");

                            if (!(source.getEntity() instanceof ServerPlayer player)) {
                                source.sendFailure(Component.literal("§cDebes especificar un jugador al usar este comando desde consola."));
                                return 0;
                            }

                            return teleportPlayer(source, player, worldName);
                        }))
        );
    }

    private static int teleportPlayer(CommandSourceStack source, String playerName, String worldName) {
        ServerPlayer player = source.getServer().getPlayerList().getPlayerByName(playerName);
        if (player == null) {
            source.sendFailure(Component.literal("§cEl jugador '" + playerName + "' no está conectado."));
            return 0;
        }

        return teleportPlayer(source, player, worldName);
    }

    private static int teleportPlayer(CommandSourceStack source, ServerPlayer player, String worldName) {
        Level targetWorld = WorldManager.getInstance().getWorld(worldName);
        if (!(targetWorld instanceof ServerLevel level)) {
            source.sendFailure(Component.literal("§cEl mundo '" + worldName + "' no está registrado o cargado."));
            return 0;
        }

        player.teleportTo(level,
                level.getSharedSpawnPos().getX() + 0.5,
                level.getSharedSpawnPos().getY(),
                level.getSharedSpawnPos().getZ() + 0.5,
                player.getYRot(),
                player.getXRot()
        );

        source.sendSuccess(() -> Component.literal("§aJugador '" + player.getName().getString() + "' teletransportado a '" + worldName + "'."), true);
        return 1;
    }
}
