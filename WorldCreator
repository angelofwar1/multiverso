package com.crafterscr.Multiverso.world;

import com.crafterscr.Multiverso.WorldManager;
import com.crafterscr.Multiverso.config.MultiversoConfigManager;
import com.crafterscr.Multiverso.config.WorldConfig;
import com.crafterscr.Multiverso.util.PermissiveDirectoryValidator;
import com.mojang.logging.LogUtils;
import com.mojang.serialization.Lifecycle;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Holder;
import net.minecraft.core.RegistryAccess;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ChunkHolder;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.server.level.progress.ChunkProgressListener;
import net.minecraft.world.RandomSequences;
import net.minecraft.world.level.*;
import net.minecraft.world.level.biome.Biomes;
import net.minecraft.world.level.biome.FixedBiomeSource;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraft.world.level.chunk.ChunkStatus;
import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
import net.minecraft.world.level.dimension.DimensionType;
import net.minecraft.world.level.dimension.LevelStem;
import net.minecraft.world.level.levelgen.WorldOptions;
import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
import net.minecraft.world.level.levelgen.FlatLevelSource;
import net.minecraft.world.level.storage.LevelResource;
import net.minecraft.world.level.storage.LevelStorageSource;
import net.minecraft.world.level.storage.PrimaryLevelData;
import net.minecraft.world.level.gameevent.GameEventListenerRegistry;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.storage.ServerLevelData;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import net.minecraft.world.level.ChunkPos;
import net.minecraft.world.level.CustomSpawner;

import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.Executor;

public class WorldCreator {
    private static final Logger LOGGER = LogUtils.getLogger();

    public static ServerLevel loadExistingWorld(MinecraftServer server, String worldName) {
        ResourceKey<Level> key = ResourceKey.create(
                net.minecraft.core.registries.Registries.DIMENSION,
                new ResourceLocation("multiverso", worldName)
        );
        return server.getLevel(key);
    }

    public static class DummyChunkProgressListener implements ChunkProgressListener {
        @Override
        public void updateSpawnPos(ChunkPos chunkPos) {}

        @Override
        public void onStatusChange(ChunkPos pos, ChunkStatus status) {}

        @Override
        public void start() {}

        @Override
        public void stop() {}
    }

    public static int createWorld(CommandSourceStack source, String name, String type, String generator, long seed, ServerPlayer player) {
        MinecraftServer server = source.getServer();
        RegistryAccess registryAccess = server.registryAccess();

        ResourceKey<Level> levelKey = ResourceKey.create(net.minecraft.core.registries.Registries.DIMENSION, new ResourceLocation("multiverso", name));
        ResourceKey<LevelStem> stemKey = ResourceKey.create(net.minecraft.core.registries.Registries.LEVEL_STEM, new ResourceLocation("multiverso", name));

        Holder<DimensionType> dimensionTypeHolder;
        try {
            dimensionTypeHolder = switch (type.toLowerCase()) {
                case "nether" -> registryAccess.registryOrThrow(net.minecraft.core.registries.Registries.DIMENSION_TYPE).getHolderOrThrow(BuiltinDimensionTypes.NETHER);
                case "end" -> registryAccess.registryOrThrow(net.minecraft.core.registries.Registries.DIMENSION_TYPE).getHolderOrThrow(BuiltinDimensionTypes.END);
                case "overworld" -> registryAccess.registryOrThrow(net.minecraft.core.registries.Registries.DIMENSION_TYPE).getHolderOrThrow(BuiltinDimensionTypes.OVERWORLD);
                default -> throw new IllegalArgumentException("Tipo de dimensión inválido: " + type);
            };
        } catch (Exception e) {
            source.sendFailure(Component.literal("\u00a7cError obteniendo el tipo de dimensión: " + e.getMessage()));
            LOGGER.error("Error al obtener tipo de dimensión", e);
            return 0;
        }

        ChunkGenerator chunkGenerator = switch (generator.toLowerCase()) {
            case "flat" -> {
                var biomeRegistry = registryAccess.lookup(net.minecraft.core.registries.Registries.BIOME).orElseThrow();
                var structureSets = registryAccess.lookup(net.minecraft.core.registries.Registries.STRUCTURE_SET).orElseThrow();
                var placedFeatures = registryAccess.lookup(net.minecraft.core.registries.Registries.PLACED_FEATURE).orElseThrow();
                var flatSettings = FlatLevelGeneratorSettings.getDefault(biomeRegistry, structureSets, placedFeatures);
                yield new FlatLevelSource(flatSettings);
            }
            case "normal" -> server.overworld().getChunkSource().getGenerator();
            case "void" -> {
                var biomeRegistry = registryAccess.registryOrThrow(net.minecraft.core.registries.Registries.BIOME);
                var plains = biomeRegistry.getHolderOrThrow(Biomes.PLAINS);
                var biomeSource = new FixedBiomeSource(plains);
                yield new VoidChunkGenerator(biomeSource);
            }
            default -> {
                source.sendFailure(Component.literal("\u00a7cGenerador inválido: " + generator));
                yield null;
            }
        };

        if (chunkGenerator == null) return 0;

        LevelStem levelStem = new LevelStem(dimensionTypeHolder, chunkGenerator);

        LevelStorageSource.LevelStorageAccess storageAccess;
        try {
            Path savesDir = server.getWorldPath(LevelResource.ROOT);
            Path backupsDir = savesDir.resolve("../backups").normalize();
            if (!Files.exists(backupsDir)) {
                Files.createDirectories(backupsDir);
            }

            storageAccess = new LevelStorageSource(
                    savesDir,
                    backupsDir,
                    new PermissiveDirectoryValidator(),
                    server.getFixerUpper()
            ).createAccess(name);
        } catch (IOException e) {
            LOGGER.error("No se pudo crear acceso al almacenamiento", e);
            source.sendFailure(Component.literal("\u00a7cError de almacenamiento."));
            return 0;
        }

        PrimaryLevelData template = (PrimaryLevelData) server.overworld().getLevelData();
        LevelSettings levelSettings = new LevelSettings(
                name,
                GameType.SURVIVAL,
                false,
                template.getDifficulty(),
                template.isHardcore(),
                new GameRules(),
                template.getDataConfiguration()
        );

        WorldOptions worldOptions = new WorldOptions(seed, true, false);
        PrimaryLevelData worldData = new PrimaryLevelData(levelSettings, worldOptions, PrimaryLevelData.SpecialWorldProperty.NONE, Lifecycle.stable());

        Executor executor;
        try {
            Field f = MinecraftServer.class.getDeclaredField("backgroundExecutor");
            f.setAccessible(true);
            executor = (Executor) f.get(server);
        } catch (Exception ex) {
            executor = Runnable::run;
        }


        ChunkProgressListener chunkProgressListener = new DummyChunkProgressListener();
        ServerLevelData serverLevelData = (ServerLevelData) worldData;

        // Lista vacía de CustomSpawner (para evitar errores)
        List<CustomSpawner> emptySpawners = List.of();

        ServerLevel newWorld = new ServerLevel(
                        server,
                        executor,
                        storageAccess,
                        serverLevelData, // casteado
                        levelKey,
                        levelStem,
                        chunkProgressListener,
                        false, // isDebug
                        worldOptions.seed(),
                        emptySpawners, // tickTime or isClient
                        true,
                        new RandomSequences(worldOptions.seed())
                );

        if (generator.equalsIgnoreCase("void")) {
            int y = newWorld.getMinBuildHeight() + 64;
            for (int x = -2; x <= 2; x++) {
                for (int z = -2; z <= 2; z++) {
                    newWorld.setBlockAndUpdate(new BlockPos(x, y, z), Blocks.STONE.defaultBlockState());
                }
            }
            newWorld.setBlockAndUpdate(new BlockPos(0, y + 1, 0), Blocks.TORCH.defaultBlockState());
            if (player != null) {
                player.teleportTo(newWorld, 0.5, y + 1, 0.5, player.getYRot(), player.getXRot());
            }
        }

        WorldManager.getInstance().addWorld(name, newWorld);
        MultiversoConfigManager.registerWorld(new WorldConfig(name, type, seed, generator));

        source.sendSuccess(() -> Component.literal("\u00a7aMundo '" + name + "' creado correctamente."), false);
        return 1;
    }
}
